---
- name: Create a new VPC EC2 RDS CDN instance
  hosts: localhost
  gather_facts: False 
  
  vars:
      
  
  tasks:
     - name: create VPC
       ec2_vpc_net:
         name: "{{ vpc_name }}"
         cidr_block: "{{ vpc_cidr }}"
         region: "{{ region }}"
         state: present
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
       register: vpc
     - name: associate subnet to the VPC
       ec2_vpc_subnet:
         state: present
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ region }}"
         cidr: "{{ subnet_cidr }}"
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         map_public: yes
         resource_tags:
           Name: "{{ subnet_name }}"
       register: subnet

     - name: Create Private subnets for database servers
       ec2_vpc_subnet:
         region: "{{ region }}"
         aws_secret_key: "{{ aws_secret_key }}"
         aws_access_key: "{{ aws_access_key }}"
         state: present
         cidr: "{{ subnet_cidr }}"
         map_public: no
         tags:
          Name: db_subenet
         vpc_id: "{{ vpc.vpc.id }}"
       register: db_subnet
     - name: Create rds subnet
       ec2_vpc_subnet:
         region: "{{ region }}"
         aws_secret_key: "{{ aws_secret_key }}"
         aws_access_key: "{{ aws_access_key }}"
         state: present
         cidr: "{{ subnet_cidr }}"
         map_public: no
         tags:
          Name: rds_subenet
         vpc_id: "{{ vpc.vpc.id }}"
       register: rds_subnet
     - name: create IGW
       ec2_vpc_igw:
          vpc_id: "{{ vpc.vpc.id }}"
          region: "{{ region }}"
          aws_access_key: "{{ aws_access_key }}"
          aws_secret_key: "{{ aws_secret_key }}"
          state: "present"
          tags:
            Name: "{{ igw_name }}"
       register: igw

     - name: Route IGW
       ec2_vpc_route_table:
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ region }}"
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         subnets:
          - "{{ subnet.subnet.id }}"
         routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id  }}"
         tags:
          Name: "{{ route_name }}"
       register: route igw 
     
     - name: Create Web Security Group
       ec2_group:
         name: WEB-SG
         description: Security Group for webserver
         state: present
         vpc_id: "{{ vpc.vpc.id }}"
         region: "{{ region }}"
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         rules:
         - proto: tcp
           ports:
           - 80
           cidr_ip: 0.0.0.0/0
           rule_desc: allow all on port 80 
         - proto: tcp
           ports:
           - 22
           cidr_ip: 0.0.0.0/0
           rule_desc: allow all on port 22
         tags:
          Name: "WEB-SG"
       register: websecgroup
     - name: Create DB security group
       ec2_group:
         region: "{{ region }}"
         name: "DB-SG"
         description: Security Group for Database
         vpc_id: "{{ vpc.vpc.id }}"
         state: present
         aws_secret_key: "{{ aws_secret_key }}"
         aws_access_key: "{{ aws_access_key }}"
         rules:
          - proto: tcp
            from_port: 3306
            to_port: 3306
            group_id: "{{ websecgroup.group_id }}"
            rule_desc: allow all on port 3306
         tags:
          Name: "DB-SG"
       register: dbsecgroup
     - name: create a new ec2 key pair
       ec2_key:
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         name: ec2_keypair
         region: "{{ region }}"
       register: keypair
 
     - name: Copy EC2 Private Key locally so it can be later on used to SSH into the instance
       copy: content= "{{ keypair.key.private_key }}" dest= "{{ ec2_key_directory }}"key.ppk
       when: keypair.changed == true

     - name: Create an webserver instance
       ec2:
          aws_secret_key: "{{aws_secret_key}}"
          aws_access_key: "{{aws_access_key}}"
          group_id: "{{ websecgroup.group_id }}"  # security group name
          instance_type: "{{ instance_type}}"
          key_name: "{{ keypair.key.name  }}"
          image: "{{ ami }}"
          wait: true
          region: "{{ region }}"
          count: 1  # default
          count_tag:
            Name: webserver
          instance_tags:
            Name: webserver
          vpc_subnet_id: "{{ subnet.subnet.id }}"
          assign_public_ip: yes
       register: webserver
     - name: Create RDS instance
       rds:
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        command: create
        instance_name: "test-database"
        db_engine: MySQL
        size: 20
        instance_type: db.t2.micro
        subnet: "{{ subnet_group }}"
        vpc_security_groups: "{{ websecgroup.group_id }}"
        username: "{{ mysql_user }}"
        password: "{{mysql_password}}"
        publicly_accessible: no
        wait: yes
        wait_timeout: 900
       register: rds_db
     - name: Create external ELB
       ec2_elb_lb:
        name: "test-elb"
        state: present
        region: "{{ region }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        security_group_names: "WEB-SG"
        wait: no
        subnets: "{{ subnet.subnet.id }}"
        purge_subnets: yes
        cross_az_load_balancing: no
        listeners:
        - protocol: http
          load_balancer_port: 80
          instance_port: 80
        health_check:
         ping_protocol: http
         ping_port: 80
         ping_path: "/"
         response_timeout: 5
         interval: 10
         unhealthy_threshold: 2
         healthy_threshold: 2
       register: web_elb
     - name: Get facts on webserver instances
       ec2_instance_facts:
        aws_secret_key: "{{ aws_secret_key }}"
        aws_access_key: "{{ aws_access_key }}"
        region: "{{ region }}"
        filters:
          "tag:Name": "webserver"
           instance-state-name: running
        register: webserver_gathered_facts
      - name: Add webserver instance to external ELB
        ec2_elb:
         region: "{{ region }}"
         secret_key: "{{ aws_secret_key }}"
         access_key: "{{ aws_access_key }}"
         ec2_elbs: "{{ web_elb.elb.name }}"
         instance_id: "{{ item.instance_id }}"
         state: present
         wait: no
         with_items:
          - "{{ webserver_gathered_facts.instances }}"
      - name: Create Cloudfront distribution for external ELB endpoint
        cloudfront_distribution:
         region: "{{ region }}"
         secret_key: "{{ aws_secret_key }}"
         access_key: "{{ aws_access_key }}"
         state: present
         caller_reference: "{{ cdn_caller_reference }}"
         default_origin_domain_name: "{{ web_elb.elb.dns_name }}"
         default_cache_behavior:
          forwarded_values:
            query_string: true
          cookies:
            forward: all
          headers:
            - '*'
          viewer_protocol_policy: allow-all
          allowed_methods:
           items:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
           cached_methods:
            - GET
            - HEAD
         comment: "redmine-distribution"
         wait: no
         tags:
          Name: "redmine-distribution"
          Project: "{{ redmine }}"
          Priority: '1'
         register: cdn
         until: cdn is success
         retries: 10
         delay: 2
         notify: Print CDN endpoint
         failed_when: False
